import { Games } from '../../../lib/collections';
import { LEVELS, OPPONENTS, MIGRATION_CONST, MULTIPLAYER_MODE } from '../../../lib/enum';

const poolGameId = MIGRATION_CONST.poolGameId;


const gameTutorialData = [
  {
    _id: '583b53e2e9026608852dd03d',
    userId: 'system',
    package: 'starter',
    ScenarioName: 'First Version of The Call Shot',
    ScenarioSequenceNumber: 2,
    SetupScript: 'ResetTable(true); \r\nPlaceBallOnTable(0, 0, 0);\r\nPlaceBallOnTable(1, -0.35, -0.25); \r\nTakeCallShot();',
    Difficulty: 2,
    gameId: poolGameId,
    instructionContent: [
      "<h2>First Version of The <em>Call Shot</em></h2>\n<p>After a legal break shot, the players start to take turns to do \"Call shot\", meaning he has to aim a specific target ball at a specific target pocket, and he will only continue to shoot next ball if the targets are satisfied. In this tutorial, you will add a simple function for your AI to hit the black ball (ID=1) into pocket 0.</p>\n<ul>\n<li>\n<h3>The Scenario Setup</h3>\n<p>The setup code for this tutorial carries out 3 steps:</p>\n<ul>\n<li>Reset the table using the function <strong>resetTable(true)</strong> , where the argument <strong>true</strong> means we want to clear the table (keep all balls in pockets);</li>\n<li>Place the cue ball and black ball on the table using the function <strong>PlaceBallOnTable</strong>, which takes 3 arguments: the ID of the ball to be placed, the relative x coordinates and the relative y coordinates. These coordinates are <em>relative</em> in that they are given as values between -0.5 and 0.5, and the system will scale them up by the table width and height to get the actual position. This is necessary since the table width/height may be different for different game settings.</li>\n<li>Call the function <strong>takeCallShot</strong>, which asks your AI in turn for the shot command.</li>\n</ul>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_125331\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\"><a class=\"toolbar_item command_help help\" href=\"http://192.241.191.117:4000/PathPool/scenarios/scenario2/index.html\">?</a></div>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td class=\"gutter\">\n<div class=\"line number1 index0 alt2\">1</div>\n<div class=\"line number2 index1 alt1\">2</div>\n<div class=\"line number3 index2 alt2\">3</div>\n<div class=\"line number4 index3 alt1\">4</div>\n</td>\n<td class=\"code\">\n<div class=\"container\">\n<div class=\"line number1 index0 alt2\"><code class=\"js plain\">ResetTable(</code><code class=\"js keyword\">true</code><code class=\"js plain\">); </code></div>\n<div class=\"line number2 index1 alt1\"><code class=\"js plain\">PlaceBallOnTable(0, 0, 0);</code></div>\n<div class=\"line number3 index2 alt2\"><code class=\"js plain\">PlaceBallOnTable(1, -0.35, -0.25); </code></div>\n<div class=\"line number4 index3 alt1\"><code class=\"js plain\">TakeCallShot();</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p>&nbsp;</p>\n</li>\n<li>\n<h3>The first cut of the getCallShot function</h3>\nPlease append the getCallShot function below to your AI code after the getBreakShot function.\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_164179\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\"><a class=\"toolbar_item command_help help\" href=\"http://192.241.191.117:4000/PathPool/scenarios/scenario2/index.html\">?</a></div>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td class=\"gutter\">\n<div class=\"line number1 index0 alt2\">1</div>\n<div class=\"line number2 index1 alt1\">2</div>\n<div class=\"line number3 index2 alt2\">3</div>\n<div class=\"line number4 index3 alt1\">4</div>\n<div class=\"line number5 index4 alt2\">5</div>\n<div class=\"line number6 index5 alt1\">6</div>\n<div class=\"line number7 index6 alt2\">7</div>\n<div class=\"line number8 index7 alt1\">8</div>\n</td>\n<td class=\"code\">\n<div class=\"container\">\n<div class=\"line number1 index0 alt2\"><code class=\"js keyword\">this</code><code class=\"js plain\">.getCallShot = </code><code class=\"js keyword\">function</code><code class=\"js plain\">() {</code></div>\n<div class=\"line number2 index1 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">return</code> <code class=\"js plain\">{</code></div>\n<div class=\"line number3 index2 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">aimx: world.Balls[1].x,</code></div>\n<div class=\"line number4 index3 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">aimy: world.Balls[1].y,</code></div>\n<div class=\"line number5 index4 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">strength: 700,</code></div>\n<div class=\"line number6 index5 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">spin: -0.5</code></div>\n<div class=\"line number7 index6 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">};</code></div>\n<div class=\"line number8 index7 alt1\"><code class=\"js plain\">};</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p>&nbsp;</p>\nIn this function, we return a command object with a few parameters, which are similar to the command we return on the getBreakShot function, except that you don't specify the cue ball placement position since that's not changable in a normal call shot. The only noticable new logic is that the aimx and aimy variables are the center point position of the balck ball, as given by the array <strong>world.Balls</strong>, where the index is the ball's ID.\n<p>Please try to click the Run button now, and you should see your AI shooting the cue ball directly towards the black ball, since it is using the black ball's position as the aim. Now, before we move on, how do you think we can change the getCallShot function to aim differently so the black ball would go towards pocket 0?</p>\n</li>\n<li>\n<h3>Improving the getCallShot Function</h3>\nPlease append the getCallShot function below to your AI code after the getBreakShot function.\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_527615\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\"><a class=\"toolbar_item command_help help\" href=\"http://192.241.191.117:4000/PathPool/scenarios/scenario2/index.html\">?</a></div>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td class=\"gutter\">\n<div class=\"line number1 index0 alt2\">1</div>\n<div class=\"line number2 index1 alt1\">2</div>\n<div class=\"line number3 index2 alt2\">3</div>\n<div class=\"line number4 index3 alt1\">4</div>\n<div class=\"line number5 index4 alt2\">5</div>\n<div class=\"line number6 index5 alt1\">6</div>\n<div class=\"line number7 index6 alt2\">7</div>\n<div class=\"line number8 index7 alt1\">8</div>\n<div class=\"line number9 index8 alt2\">9</div>\n<div class=\"line number10 index9 alt1\">10</div>\n<div class=\"line number11 index10 alt2\">11</div>\n<div class=\"line number12 index11 alt1\">12</div>\n<div class=\"line number13 index12 alt2\">13</div>\n<div class=\"line number14 index13 alt1\">14</div>\n</td>\n<td class=\"code\">\n<div class=\"container\">\n<div class=\"line number1 index0 alt2\"><code class=\"js keyword\">this</code><code class=\"js plain\">.getCallShot = </code><code class=\"js keyword\">function</code><code class=\"js plain\">() {</code></div>\n<div class=\"line number2 index1 alt1\">&nbsp;</div>\n<div class=\"line number3 index2 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">targetBallPos = world.Balls[1];</code></div>\n<div class=\"line number4 index3 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">pocketPos = world.Pockets[0];</code></div>\n<div class=\"line number5 index4 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">direction = targetBallPos.clone().subtract(pocketPos).normalize();</code></div>\n<div class=\"line number6 index5 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">aimPos = targetBallPos.clone().add(direction.multiplyScalar(world.BallDiameter));</code></div>\n<div class=\"line number7 index6 alt2\">&nbsp;</div>\n<div class=\"line number8 index7 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">return</code> <code class=\"js plain\">{</code></div>\n<div class=\"line number9 index8 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">aimx: aimPos.x,</code></div>\n<div class=\"line number10 index9 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">aimy: aimPos.y,</code></div>\n<div class=\"line number11 index10 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">strength: 700,</code></div>\n<div class=\"line number12 index11 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">spin: -0.5</code></div>\n<div class=\"line number13 index12 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">};</code></div>\n<div class=\"line number14 index13 alt1\"><code class=\"js plain\">};</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p>&nbsp;</p>\nIn this function, instead of aiming at the black ball itself, we aim at an imagined ball position next to the black ball. That position (the yellow circle) is where we want the cue ball to be at the moment it hits the black ball. As shown in the picture, we want the direction from the black ball to the cue ball to be same as the direction from pocket 0 to the black ball, and the cue ball and black ball are touching each other (so their center positions are exactly one ball diameter apart).\n<div><img src=\"http://192.241.191.117:4000/PathPool/scenarios/scenario2/RiskyPoolAim.png\" width=\"651\" height=\"302\" /></div>\n<p>Here are some explanation on the vector operations used in the AI code (official document is <a href=\"http://victorjs.org/\" target=\"_blank\" rel=\"noopener\">here</a>):</p>\n<ul>\n<li><strong>clone</strong> : to create another vector with the same x and y attributes. This is often necessary if we don't want to save the result of future math operations back to the vector itself. In this case, if we didn't make a clone of the targetBallPos vector, its value will change after line 5, then we won't be able to use its original value on line 6.</li>\n<li><strong>normalize</strong>: to rescale the vector to be of length 1, where the length of the vector (x,y) is defined as square root of the sum of (x*x + y*y). This is needed since on line 6 we want to add a distance of exactly BallDiameter to the black ball position, so we need to make sure the direction's length is 1, and then we can scale it up by the BallDiameter.</li>\n</ul>\n</li>\n</ul>",
      '<h2>Extra Credit: try different initial position for the black ball and cue ball</h2>\n<p>If you want to see if your getCallShot function works under other table position setup, you can change the position of black and cue ball as specified in the PlaceBallOnTable call in the setup code. Also note that since we add a random error to the shooting direction, the shot may fail if the cue ball is too far away from the black ball.</p>'
    ]
  },
  {
    _id: '583b53e2e9026608852dd03f',
    userId: 'system',
    package: 'starter',
    ScenarioName: 'The Call Shot: Selecting the Best Target Ball',
    ScenarioSequenceNumber: 4,
    SetupScript: 'ResetTable(true);\r\nPlaceBallOnTable(0, 0.25, 0.2);\r\nPlaceBallOnTable(2, 0.15, -0.3); \r\nPlaceBallOnTable(3, -0.25, -0.1); \r\nPlaceBallOnTable(6, 0.4, -0.35); \r\nChooseRedColor(); \r\nTakeCallShot();\r\n',
    Difficulty: 2,
    gameId: poolGameId,
    instructionContent: [
      '<h2>The Call Shot: Selecting the Best Target Ball</h2>\n<p>In the last tutorial, your AI always tries to shoot the black ball. In this tutorial, you will improve that function so that it will compare all balls available and pick the best ball to target based on the probability of success.</p>\n<ul>\n<ul>\n<li>\n<h3>The Scenario Setup</h3>\n<p>The setup code for this tutorial places 3 red balls around the table, and set your AI to be eligible to shoot any red balls using the function <strong>ChooseRedColor</strong>. There are also similar functions of <strong>ChooseYellowColor</strong> and <strong>ChooseBlackColor</strong> if you need to use them later.</p>\n<p>&nbsp;</p>\n<div>\n<div id="highlighter_627194" class="syntaxhighlighter  js">\n<div class="toolbar">\n<pre class="language-javascript"><code>ResetTable(true);\nPlaceBallOnTable(0, 0.25, 0.2);\nPlaceBallOnTable(2, 0.15, -0.3); \nPlaceBallOnTable(3, -0.25, -0.1); \nPlaceBallOnTable(6, 0.4, -0.35); \nChooseRedColor(); \nTakeCallShot();</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n</li>\n<li>\n<h3>Hints on Iterating Through All Balls of Your Chosen Color</h3>\nTo modify your getCallShot function to iterate through all balls that your AI can shoot, you need to make a few changes:\n<ul>\n<li><strong>world.CandidateBallList[myID]</strong> this is an updated list of ball IDs that you can shoot, given to your AI every time before its getCallShot function is called.</li>\n<li>Currently your helper function getCallShotForPocket only generates a command object for a given pocket ID assuming you want to shoot ball 1, so you need to change it to take the ball ID as another input parameter so you can get the command for any ball and any target.</li>\n</ul>\n<p>Before looking at our solution, please try to work out the changes yourself.</p>\n</li>\n</ul>\n</ul>\n<p><br /><br /><br /></p>\n<ul>\n<li>\n<h3>Example AI Code for Iterating Through All Balls of Your Chosen Color</h3>\n<p>&nbsp;</p>\n<div>\n<div id="highlighter_740958" class="syntaxhighlighter  js">\n<div class="toolbar">\n<pre class="language-javascript"><code>var getCallShotForPocketForBall = function(pocketID, ballID) {\n \n    var targetBallPos = world.Balls[ballID];\n    var pocketPos = world.Pockets[pocketID];\n    var direction = targetBallPos.clone().subtract(pocketPos).normalize();\n    var aimPos = targetBallPos.clone().add(direction.multiplyScalar(world.BallDiameter));\n \n    var cmd = {\n        aimx: aimPos.x,\n        aimy: aimPos.y,\n        strength: 700,\n        spin: -0.5,\n        targetPocketID: pocketID,\n        targetBallID: ballID\n    };\n     \n    return cmd;\n};\n \nthis.getCallShot = function() {\n    var maxProb = -1; var bestCmd = null;\n    for(var i=0; i &lt; world.CandidateBallList[myID].length; i ++) {\n        var ballID = world.CandidateBallList[myID][i];\n        for(var pocketID = 0; pocketID &lt; 6; pocketID ++ ) {\n            var cmd = getCallShotForPocketForBall(pocketID, ballID);\n             \n            var prob = calculateProbability(cmd);\n            console.log("prob for pocket " + pocketID + " and ballID " + ballID + " is " + prob);\n            if ( prob &gt; maxProb ) {\n                maxProb = prob;\n                bestCmd = cmd;\n            }\n        }\n    };\n     \n    return bestCmd;\n \n};</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>If you click the Run button now, and you should see that your AI is automatically choosing pocket 1 as the target, and it should have printed out the success probability of all pockets. In your setup code, try to set the cue ball and red balls to different positions, and see if your AI can always choose the best ball/pocket combination to aim for.</p>\n</li>\n</ul>'
    ]
  },
  {
    _id: '583b53e2e9026608852dd040',
    userId: 'system',
    package: 'starter',
    ScenarioName: 'The Call Shot: Avoiding Pocketing Cue Ball or Black Ball',
    ScenarioSequenceNumber: 5,
    SetupScript: 'ResetTable(true);\r\nPlaceBallOnTable(0, 0, 0.2);\r\nPlaceBallOnTable(2, 0, 0.1); \r\nPlaceBallOnTable(3, 0.3, -0.3); \r\nChooseRedColor(); \r\nTakeCallShot();',
    Difficulty: 2,
    gameId: poolGameId,
    instructionContent: [
      "<h2>The Call Shot: Avoiding Pocketing Cue Ball or Black Ball</h2>\n<p>Sometimes the best ball to shoot may also get the cue ball or black ball pocketed unexpectedly. To avoid it, your AI needs to use another system function for target pocketing probabolity that also tells you the probability of pocketing black or cueball.</p>\n<ul>\n<ul>\n<li>\n<h3>The Scenario Setup</h3>\n<p>The setup for this tutorial is a likely scenario where the cue ball might be pocketed along with the target ball when it is hit with some backward spin. Try to click \"Run\" now with your current AI code, and it will probably choose the red ball in the middle for its high probability of pocketing, and thus pocketing the cue ball (\"scratch it\") along the way.</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_941435\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-javascript\"><code>ResetTable(true);\nPlaceBallOnTable(0, 0, 0.2);\nPlaceBallOnTable(2, 0, 0.1); \nPlaceBallOnTable(3, 0.3, -0.3); \nChooseRedColor(); \nTakeCallShot();</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n</li>\n<li>\n<h3>Helper Function on Avoiding Pocketing Cue Ball</h3>\nBesides calling <strong>WorldForPlayer.calculateProbability</strong> to get the probability of pocketing the target ball, you can call another function <strong>CalculateProbabilityByBallID(shotCommand, ballID)</strong>. As you may have guessed, this function returns the probability of the specified ball being pocketed when executing the shot command.\n<p>Before looking at our solution, please try to work out the changes yourself.</p>\n</li>\n</ul>\n</ul>\n<p><br /><br /><br /></p>\n<ul>\n<li>\n<h3>Example AI Code for Avoiding Pocketing the Cue Ball or Black Ball</h3>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_881427\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-javascript\"><code>this.getCallShot = function() {\n    var maxProb = -1; var bestCmd = null;\n    for(var i=0; i &lt; world.CandidateBallList[myID].length; i ++) {\n        var ballID = world.CandidateBallList[myID][i];\n        for(var pocketID = 0; pocketID &lt; 6; pocketID ++ ) {\n            var cmd = getCallShotForPocketForBall(pocketID, ballID);\n            var targetballPocketProb = calculateProbability(cmd);\n            var cueballPocketProb = CalculateProbabilityByBallID(cmd, 0);\n            var blackballPocketProb = CalculateProbabilityByBallID(cmd, 1);\n            console.log(\"prob for pocket \" + pocketID + \" and ballID \" + ballID + \" is \" + targetballPocketProb + \" cue ball \" + cueballPocketProb + \" blackball \" + blackballPocketProb);\n            if ( targetballPocketProb &gt; maxProb &amp;&amp; cueballPocketProb &lt; 20 &amp;&amp; blackballPocketProb &lt; 0.1 ) {\n                maxProb = targetballPocketProb;\n                bestCmd = cmd;\n            }\n        }\n    };\n     \n    return bestCmd;\n \n};</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>Note that we used the new function calcProbSyncByBallID to find out what's the probability to pocket the cue ball and black ball, and we only adopt a shot command if the probability is less than a threshold. The thresholds used are 20 (i.e. 20% of probability) for cue ball and 0.1 (i.e. 0.1% of probability) for black ball, but you can certainly change them to a value you prefer. If you click the Run button now, you should see that your AI is not choosing ball 2 even though it has a high pocketing probability. In your setup code, try to set the cue ball and red balls to different positions, and see if your AI can always choose the best ball/pocket combination to aim for.</p>\n</li>\n</ul>"
    ]
  },
  {
    _id: '583b53e2e9026608852dd042',
    userId: 'system',
    package: 'advanced',
    ScenarioName: 'Hitting My Balls First',
    ScenarioSequenceNumber: 7,
    SetupScript: 'ResetTable(true);\r\nPlaceBallOnTable(2, 0.2, -0.1); \r\nPlaceBallOnTable(3, 0.3, -0.3); \r\nPlaceBallOnTable(6, -0.2, 0.4); \r\nChooseRedColor(); \r\nPlaceCueBallFromHand();',
    Difficulty: 2,
    gameId: poolGameId,
    instructionContent: [
      "<h2>Hitting My Balls First</h2>\n<p>One of the game rules is that your cue ball should touch target balls of your chosen color first, or if you haven't chosen a color, your cue ball should touch any ball except the black ball first. To avoid getting a panelty for this foul, your AI needs to check if it will hit the right colored balls first when choosing which ball to shoot next.</p>\n<ul>\n<ul>\n<li>\n<h3>The Scenario Setup</h3>\n<p>The setup for this tutorial sets up a trap to trigger such a foul. Your AI will shoot red balls, and 2 red balls are available. But the best candidate red ball is actually blocked by a yellow ball. Without any change, your AI code will likely touch the yellow ball first.</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_518938\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-markup\"><code>ResetTable(true);\nPlaceBallOnTable(0, -0.41, -0.29); \nPlaceBallOnTable(1, 0, -0.3); \nPlaceBallOnTable(2, 0.4, 0.3); \nPlaceBallOnTable(3, -0.47, -0.43); \nPlaceBallOnTable(4, -0.44, -0.36); \nChooseRedColor(); \nTakeCallShot();\n</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n</li>\n<li>\n<h3>Checking First Touched Ball Color</h3>\nWhen choosing which ball to aim at, you can call the function <strong>isValidFirstTouchColor(shotCommand, myColor)</strong>. It returns <strong>true</strong> if your shot will touch a valid colored ball first.\n<p>Before looking at our example solution below, try to work out the changes yourself.</p>\n</li>\n</ul>\n</ul>\n<p><br /><br /><br /></p>\n<ul>\n<li>\n<h3>Example AI Code for Checking First Touched Ball Color</h3>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_419618\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-javascript\"><code>this.getCallShot = function() {\n    var maxProb = -1; var bestCmd = null;\n    for(var i=0; i &lt; world.CandidateBallList[myID].length; i ++) {\n        var ballID = world.CandidateBallList[myID][i];\n        for(var pocketID = 0; pocketID &lt; 6; pocketID ++ ) {\n            var cmd = getCallShotForPocketForBall(pocketID, ballID);\n            if ( !world.isValidFirstTouchColor(cmd, world.PlayerInfo[myID].chosenColor)) {\n                // first touch color is not valid\n                continue;\n            }\n            var targetballPocketProb = calculateProbability(cmd);\n            var cueballPocketProb = CalculateProbabilityByBallID(cmd, 0);\n            var blackballPocketProb = CalculateProbabilityByBallID(cmd, 1);\n            console.log(\"prob for pocket \" + pocketID + \" and ballID \" + ballID + \" is \" + targetballPocketProb + \" cue ball \" + cueballPocketProb + \" blackball \" + blackballPocketProb);\n            if ( targetballPocketProb &gt; maxProb &amp;&amp; cueballPocketProb &lt; 20 &amp;&amp; blackballPocketProb &lt; 0.1 ) {\n                maxProb = targetballPocketProb;\n                bestCmd = cmd;\n            }\n        }\n    };\n     \n    return bestCmd;\n \n};</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>This example AI code is modified from tutorial 5 to use the new API <strong>isValidFirstTouchColor</strong>. If the shot command is not good, it simply calls \"continue\" to skip the current command. Try to click the Run button now to see if it works. Also, in the setup code, try to set the balls to different positions, and see if your AI can always avoid touching the wrong balls first.</p>\n</li>\n</ul>"
    ]
  },
  {
    _id: '583b53e2e9026608852dd03c',
    userId: 'system',
    package: 'starter',
    ScenarioName: 'The Break Shot',
    ScenarioSequenceNumber: 1,
    SetupScript: 'TakeBreakShot();',
    Difficulty: 1,
    gameId: poolGameId,
    instructionContent: [
      "<h2>Introducing the Starter Tutorials</h2>\n<p>The Starter Tutorials are a series of tutorials that will guide you through how to build up the first version of your AI.</p>\n<p>The tutorial page has 4 tabs:</p>\n<ul>\n<li>A <strong>Tutorial</strong> tab that leads you step-by-step through a simple task to build up your AI.</li>\n<li>An <strong>AI Code</strong> tab for you to write your AI code following the tutorial. Any change you make in this editor will be auto-saved. It starts blank, but at the end of the tutorials you should have a few functions defined for your AI to be able to automatically play a full game!</li>\n<li>A <strong>Setup Code</strong> tab that sets up a specific scenario to test if your AI code can complete the task. This code is provided for you for all the tutorials. You can change them to try different setup, and you can restore the original setup code as given in the tutorial anytime you need to.</li>\n<li>A <strong>Game World</strong> tab that displays your AI code's behavior in the simulated game environement.</li>\n</ul>\n<p>&nbsp;</p>\n<p>There are 2 action buttons on the top right:</p>\n<ul>\n<li>A <strong>Run</strong> button, which will run the setup code, which in turn runs your AI code. If you are in the \"AI Code\" tab, you can also press \"Ctrl + L\" instead of clicking the button.</li>\n<li>A <strong>Release Robot Code</strong> button, which will mark the current version of you AI code as to be used in games and tournaments.</li>\n</ul>",
      "<h2>The Pool Table</h2>\n<ul>\n<li>The green table top is a rectangle of size <strong>TableWidth</strong> x <strong>TableHeight</strong>, which excludes the borders but includes the <strong>Cushions</strong>.</li>\n<li>We use a coodinate system with horizontal <strong>X</strong> axis going left to right, and vertical <strong>Y</strong> axis going top to bottom, and the table's center point coordinate is (x = <strong>CenterX</strong>, y = <strong>CenterY</strong>).</li>\n<li>The <strong>Head String</strong> is a vertical line in the middle of the left half of the table.</li>\n<li>There are 6 pockets, starting with <strong>pocket 0</strong> on left top, and rotate clock wise till <strong>pocket 5</strong>. The blue dots at the opening of each pocket indicates the pocket position given to your AI by the array <strong>Pockets[]</strong>.</li>\n<li>There are 16 balls with ID running from 0 to 15. Ball 0 is the white cue ball, and ball 1 is the black ball.</li>\n</ul>\n<p>You can access all the highlighted parameters below via a special object <strong>world</strong> in your AI code. For example, you can access <strong>TableWidth</strong> by <strong>world.TableWidth</strong>, and access the opening position of pocket 1 via <strong>world.Pockets[1]</strong>, etc.</p>\n<div><img src=\"http://192.241.191.117:4000/PathPool/scenarios/scenario1/RiskyPoolTable2.png\" width=\"668\" height=\"335\" /></div>",
      "<h2>Task for this tutorial: The <em>Break Shot</em></h2>\n<p>In this tutorial, you will add a simple function for your AI to take the break shot.</p>\n<ul>\n<li>\n<h3>The Scenario Setup</h3>\n<p>The setup code for this tutorial is just one line \"TakeBreakShot()\". When you click the \"Run\" button, the system will call the \"TakeBreakShot\" function as specified in the setup code, which in turn will be calling your AI's getBreakShot function to learn how you want to take the break shot.</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_863205\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-javascript\"><code>TakeBreakShot();</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n</li>\n<li>\n<h3>The getBreakShot function</h3>\nPlease copy the following function to your AI code editor. It adds a function \"getBreakShot\" to the AI represented by <strong>this</strong>. Note that you can use the special object <strong>world</strong> in your AI code to access the table dimension information, such as world.CenterX for the x coordinate of the center point.\n<p>&nbsp;</p>\n<pre class=\"language-javascript\"><code>this.getBreakShot = function() {\n    return {\n        cueballX: world.CenterX - world.TableWidth/4,\n        cueballY: world.CenterY,\n        aimx: world.CenterX + world.TableWidth/4,\n        aimy: world.CenterY,\n        strength: 900,\n        spin: -0.5\n    };\n};</code></pre>\n<div>\n<div id=\"highlighter_909485\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">&nbsp;</div>\n</div>\n</div>\n<p>&nbsp;</p>\nIn the function, we return a command object with a few parameters:\n<ul>\n<li><strong>cueballX</strong> and <strong>cueballX</strong> : where to place the cue ball when we take the break shot. Note that cueballX has to be on or to the left of the head string.</li>\n<li><strong>aimx</strong> and <strong>aimy</strong> : from the cue ball position, towards which point to aim our imaginary cue stick.</li>\n<li><strong>strength</strong>: how much strength to use to hit the cue ball</li>\n<li><strong>spin</strong>: how much vertical spin to apply to the cue ball, with a value between -1 and 1, where 0 means hitting the center of the cueball. Any value less than 0.4 will cause the ball to spin backwards initially, and value greater than 0.4 will cause the ball to spin forward initially.</li>\n</ul>\n<p>Please try to click \"Run\" now. If you've copied the function correctly, you should see your AI taking the Break Shot successfully.</p>\n</li>\n</ul>",
      "<h2>Extra Credit: Customize the Break Shot</h2>\n<p>Feel free to leave the function getBreakShot as is, but if you want to have a unique break shot for your AI, it is time to change the 6 parameters returned in your function getBreakShot. For example, if you want to hit the cue ball with a larger strength, you an change the <strong>strength</strong> parameter to be a larger value, say 1200. Play with different values until you are satisfied with your AI's break shot. Note that a good break shot must satisfy the following conditions:</p>\n<ul>\n<li>The cue ball or black ball should not be pocketed.</li>\n<li>Either you pocket one or more target balls, or at least 4 target balls need to touch the rails.</li>\n</ul>"
    ]
  },
  {
    _id: '583b53e2e9026608852dd045',
    userId: 'system',
    package: 'advanced',
    ScenarioName: 'Optimize Cue Ball Position After Shot',
    ScenarioSequenceNumber: 10,
    SetupScript: 'ResetTable(true);\r\nPlaceBallOnTable(2, 0.2, -0.1); \r\nPlaceBallOnTable(3, 0.3, -0.3); \r\nPlaceBallOnTable(6, -0.2, 0.4); \r\nChooseRedColor(); \r\nPlaceCueBallFromHand();',
    Difficulty: 3,
    gameId: poolGameId,
    instructionContent: [
      "<h2>Placing Cue Ball from Hand</h2>\n<p>If the cue ball scratches (falls into a pocket), the opponent will have the cue ball in hand, meaning he can place it anywhere on the table before taking a call shot. There are a lot of strategies that can be used to optimize where to place the cue ball, but to keep it simple, let us start with ranking all target balls based on how far they are from the nearest pocket, and we place the cue ball right behind that target ball.</p>\n<ul>\n<ul>\n<li>\n<h3>The Scenario Setup</h3>\n<p>The setup for this tutorial is fairly simple: we place a few red balls on the table, and call the system command <strong>PlaceCueBallFromHand</strong>, which will in turn ask your AI to calculate where to place the cueball.</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_224802\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-javascript\"><code>ResetTable(true);\nPlaceBallOnTable(2, 0.2, -0.1); \nPlaceBallOnTable(3, 0.3, -0.3); \nPlaceBallOnTable(6, -0.2, 0.4); \nChooseRedColor(); \nPlaceCueBallFromHand();</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n</li>\n<li>\n<h3>Selecting Best Target Ball to Place Cue Ball Behind It</h3>\n<p>You don't need to use any new system function to accomplish this. Before looking at our solution, please try to work out the changes yourself.</p>\n</li>\n</ul>\n</ul>\n<p><br /><br /><br /></p>\n<ul>\n<li>\n<h3>Example AI Code for Cue Ball Placement</h3>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_834427\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-javascript\"><code>var getBallClosestToPocket = function() {\n  var minDistance = world.TableWidth * 10;\n  var bestBallID = -1; var bestPocketID = -1;\n \n  for(var i=0; i &lt; world.CandidateBallList[myID].length; i ++) {\n      var ballID = world.CandidateBallList[myID][i];\n       \n      for(var pocketID = 0; pocketID &lt; 6; pocketID ++ ) {\n        var dist = world.Pockets[pocketID].distance(world.Balls[ballID]);\n        if ( dist &lt; minDistance ) {\n          minDistance = dist; bestBallID = ballID; bestPocketID = pocketID;\n        }\n      }\n  };\n  return {bestBallID, bestPocketID};\n};\n \nthis.getCueBallPlacement = function() {\n \n  var bestBP = getBallClosestToPocket();\n  var ballID = bestBP.bestBallID; var pocketID = bestBP.bestPocketID;\n \n  // now place cue ball behind best ball, but make sure it doesn't collide with any other balls\n    var targetBallPos = world.Balls[ballID];\n    var pocketPos = world.Pockets[pocketID];\n    var direction = targetBallPos.clone().subtract(pocketPos).normalize();\n    var cueballPos = targetBallPos.clone().add(direction.multiplyScalar(world.BallDiameter*1.01));\n \n    return cueballPos;\n \n};</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>This example AI code has 2 functions</p>\n<ul>\n<li><strong>getBallClosestToPocket</strong> is a new helper function that iterates through all balls and all pockets to find the best combination with the shortest distance between them.</li>\n<li><strong>this.getCueBallPlacement</strong> is a new AI function to be called by the game system. It returns the cue ball placement position. In this implementation, it simply put the cue ball at the aim ball position right behind the target ball, at a distance 1% larger than the ball diameter.</li>\n</ul>\nTry to click the Run button now to see if it works. Also, in your setup code, try to set the cue ball and red balls to different positions, and see if your AI can always choose the best location for the cueball.</li>\n</ul>",
      '<h2>Releasing Your AI Code</h2>\n<p>Now that your AI has some basic implementation of all the 3 required functions (getBreakShot, getCallShot and getCueBallPlacement), it is ready to play a full game. To use the current version as the official code for your AI, you simply need to click the <strong>Release Robot Code</strong> button on top right, and the system will save a seperate copy of it and mark that copy as the code to run when your AI is in a game. After that, even if you make any change to your AI code in the editor, the official version will not be changed, until the next time you press the <strong>Release Robot Code</strong> button to release a new version. Try that now, and you should see that all the AI related game buttons are enabled in the main page.</p>'
    ]
  },
  {
    _id: '583b53e2e9026608852dd03e',
    userId: 'system',
    package: 'starter',
    ScenarioName: 'The Call Shot: Selecting the Best Target Pockets',
    ScenarioSequenceNumber: 3,
    SetupScript: 'ResetTable(true); \r\nPlaceBallOnTable(0, 0.25, 0.2);\r\nPlaceBallOnTable(1, 0.05, -0.3); \r\nTakeCallShot();\r\n',
    Difficulty: 3,
    gameId: poolGameId,
    instructionContent: [
      "<h2>The Call Shot: Selecting the Best Target Pockets</h2>\n<p>In the last tutorial, your AI's getCallShot function always tries to shoot the black ball into pocket 0. In this tutorial, you will improve that function so that it will compare all pockets and pick the best pocket to target based on the probability of success.</p>\n<ul>\n<li>\n<h3>The Scenario Setup</h3>\n<p>The setup code for this tutorial is almost the same as the last tutorial, except that we moved the ball positions a bit so clearly pocket 1 (top middle) is a better choice than pocket 0 (left top).</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_429061\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\"><a class=\"toolbar_item command_help help\" href=\"http://192.241.191.117:4000/PathPool/scenarios/scenario3/index.html\">?</a></div>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td class=\"gutter\">\n<div class=\"line number1 index0 alt2\">1</div>\n<div class=\"line number2 index1 alt1\">2</div>\n<div class=\"line number3 index2 alt2\">3</div>\n<div class=\"line number4 index3 alt1\">4</div>\n</td>\n<td class=\"code\">\n<div class=\"container\">\n<div class=\"line number1 index0 alt2\"><code class=\"js plain\">ResetTable(</code><code class=\"js keyword\">true</code><code class=\"js plain\">); </code></div>\n<div class=\"line number2 index1 alt1\"><code class=\"js plain\">PlaceBallOnTable(0, 0.25, 0.2);</code></div>\n<div class=\"line number3 index2 alt2\"><code class=\"js plain\">PlaceBallOnTable(1, 0.05, -0.3); </code></div>\n<div class=\"line number4 index3 alt1\"><code class=\"js plain\">TakeCallShot();</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p>&nbsp;</p>\n</li>\n<li>\n<h3>Introducing the <em>calculateProbability</em> command</h3>\nJust like the human players, your AI can get an estimate of the probability of pocketing a target ball into a target pocket through the function <strong>calculateProbability(shotCmd)</strong>. The <strong>shotCmd</strong> needs to have 2 more attributes to specify the targetBallID and targetPocketID. Modify your AI's getCallShot function to the following:\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_290194\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\"><a class=\"toolbar_item command_help help\" href=\"http://192.241.191.117:4000/PathPool/scenarios/scenario3/index.html\">?</a></div>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td class=\"gutter\">\n<div class=\"line number1 index0 alt2\">1</div>\n<div class=\"line number2 index1 alt1\">2</div>\n<div class=\"line number3 index2 alt2\">3</div>\n<div class=\"line number4 index3 alt1\">4</div>\n<div class=\"line number5 index4 alt2\">5</div>\n<div class=\"line number6 index5 alt1\">6</div>\n<div class=\"line number7 index6 alt2\">7</div>\n<div class=\"line number8 index7 alt1\">8</div>\n<div class=\"line number9 index8 alt2\">9</div>\n<div class=\"line number10 index9 alt1\">10</div>\n<div class=\"line number11 index10 alt2\">11</div>\n<div class=\"line number12 index11 alt1\">12</div>\n<div class=\"line number13 index12 alt2\">13</div>\n<div class=\"line number14 index13 alt1\">14</div>\n<div class=\"line number15 index14 alt2\">15</div>\n<div class=\"line number16 index15 alt1\">16</div>\n<div class=\"line number17 index16 alt2\">17</div>\n<div class=\"line number18 index17 alt1\">18</div>\n<div class=\"line number19 index18 alt2\">19</div>\n<div class=\"line number20 index19 alt1\">20</div>\n<div class=\"line number21 index20 alt2\">21</div>\n</td>\n<td class=\"code\">\n<div class=\"container\">\n<div class=\"line number1 index0 alt2\"><code class=\"js keyword\">this</code><code class=\"js plain\">.getCallShot = </code><code class=\"js keyword\">function</code><code class=\"js plain\">() {</code></div>\n<div class=\"line number2 index1 alt1\">&nbsp;</div>\n<div class=\"line number3 index2 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">targetBallPos = world.Balls[1];</code></div>\n<div class=\"line number4 index3 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">pocketPos = world.Pockets[0];</code></div>\n<div class=\"line number5 index4 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">direction = targetBallPos.clone().subtract(pocketPos).normalize();</code></div>\n<div class=\"line number6 index5 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">aimPos = targetBallPos.clone().add(direction.multiplyScalar(world.BallDiameter));</code></div>\n<div class=\"line number7 index6 alt2\">&nbsp;</div>\n<div class=\"line number8 index7 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">shotCmd = {</code></div>\n<div class=\"line number9 index8 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">aimx: aimPos.x,</code></div>\n<div class=\"line number10 index9 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">aimy: aimPos.y,</code></div>\n<div class=\"line number11 index10 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">strength: 700,</code></div>\n<div class=\"line number12 index11 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">spin: -0.5,</code></div>\n<div class=\"line number13 index12 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">targetBallID: 1,</code></div>\n<div class=\"line number14 index13 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">targetPocketID: 0</code></div>\n<div class=\"line number15 index14 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">};</code></div>\n<div class=\"line number16 index15 alt1\">&nbsp;</div>\n<div class=\"line number17 index16 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">probability = calculateProbability(shotCmd);</code></div>\n<div class=\"line number18 index17 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">console.log(</code><code class=\"js string\">\"probability of hitting ball \"</code> <code class=\"js plain\">+ shotCmd.targetBallID + </code><code class=\"js string\">\" into pocket \"</code> <code class=\"js plain\">+ shotCmd.targetPocketID + </code><code class=\"js string\">\" is \"</code> <code class=\"js plain\">+ probability);</code></div>\n<div class=\"line number19 index18 alt2\">&nbsp;</div>\n<div class=\"line number20 index19 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">return</code> <code class=\"js plain\">shotCmd;</code></div>\n<div class=\"line number21 index20 alt2\"><code class=\"js plain\">};</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p>&nbsp;</p>\nIn this function, we assign the shot command to a variable <strong>shotCmd</strong>, and before we return that back to the system, we call <strong>calculateProbability(shotCmd)</strong> to get the probability estimate and print it out.\n<p>Please try to click the Run button now, and you should see in the console (press F12) that the probability is only about 44.14%. Try to change the target pocket to be pocket 1, and check out what is the probability.</p>\n</li>\n<li>\n<h3>Compare all pockets based on probability</h3>\nInstead of manually testing each pocket, your AI needs to get the success probability for all pockets, and select the one with the highest probability. Please replace your old getCallShot function with the following 2 functions.\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_949532\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\"><a class=\"toolbar_item command_help help\" href=\"http://192.241.191.117:4000/PathPool/scenarios/scenario3/index.html\">?</a></div>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td class=\"gutter\">\n<div class=\"line number1 index0 alt2\">1</div>\n<div class=\"line number2 index1 alt1\">2</div>\n<div class=\"line number3 index2 alt2\">3</div>\n<div class=\"line number4 index3 alt1\">4</div>\n<div class=\"line number5 index4 alt2\">5</div>\n<div class=\"line number6 index5 alt1\">6</div>\n<div class=\"line number7 index6 alt2\">7</div>\n<div class=\"line number8 index7 alt1\">8</div>\n<div class=\"line number9 index8 alt2\">9</div>\n<div class=\"line number10 index9 alt1\">10</div>\n<div class=\"line number11 index10 alt2\">11</div>\n<div class=\"line number12 index11 alt1\">12</div>\n<div class=\"line number13 index12 alt2\">13</div>\n<div class=\"line number14 index13 alt1\">14</div>\n<div class=\"line number15 index14 alt2\">15</div>\n<div class=\"line number16 index15 alt1\">16</div>\n<div class=\"line number17 index16 alt2\">17</div>\n<div class=\"line number18 index17 alt1\">18</div>\n<div class=\"line number19 index18 alt2\">19</div>\n<div class=\"line number20 index19 alt1\">20</div>\n<div class=\"line number21 index20 alt2\">21</div>\n<div class=\"line number22 index21 alt1\">22</div>\n<div class=\"line number23 index22 alt2\">23</div>\n<div class=\"line number24 index23 alt1\">24</div>\n<div class=\"line number25 index24 alt2\">25</div>\n<div class=\"line number26 index25 alt1\">26</div>\n<div class=\"line number27 index26 alt2\">27</div>\n<div class=\"line number28 index27 alt1\">28</div>\n<div class=\"line number29 index28 alt2\">29</div>\n<div class=\"line number30 index29 alt1\">30</div>\n<div class=\"line number31 index30 alt2\">31</div>\n<div class=\"line number32 index31 alt1\">32</div>\n<div class=\"line number33 index32 alt2\">33</div>\n<div class=\"line number34 index33 alt1\">34</div>\n<div class=\"line number35 index34 alt2\">35</div>\n</td>\n<td class=\"code\">\n<div class=\"container\">\n<div class=\"line number1 index0 alt2\"><code class=\"js keyword\">var</code> <code class=\"js plain\">getCallShotForPocket = </code><code class=\"js keyword\">function</code><code class=\"js plain\">(pocketID) {</code></div>\n<div class=\"line number2 index1 alt1\">&nbsp;</div>\n<div class=\"line number3 index2 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">targetBallPos = world.Balls[1];</code></div>\n<div class=\"line number4 index3 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">pocketPos = world.Pockets[pocketID];</code></div>\n<div class=\"line number5 index4 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">direction = targetBallPos.clone().subtract(pocketPos).normalize();</code></div>\n<div class=\"line number6 index5 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">aimPos = targetBallPos.clone().add(direction.multiplyScalar(world.BallDiameter));</code></div>\n<div class=\"line number7 index6 alt2\">&nbsp;</div>\n<div class=\"line number8 index7 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">cmd = {</code></div>\n<div class=\"line number9 index8 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">aimx: aimPos.x,</code></div>\n<div class=\"line number10 index9 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">aimy: aimPos.y,</code></div>\n<div class=\"line number11 index10 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">strength: 700,</code></div>\n<div class=\"line number12 index11 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">spin: -0.5,</code></div>\n<div class=\"line number13 index12 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">targetPocketID: pocketID,</code></div>\n<div class=\"line number14 index13 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">targetBallID: 1</code></div>\n<div class=\"line number15 index14 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">};</code></div>\n<div class=\"line number16 index15 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>\n<div class=\"line number17 index16 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">return</code> <code class=\"js plain\">cmd;</code></div>\n<div class=\"line number18 index17 alt1\"><code class=\"js plain\">};</code></div>\n<div class=\"line number19 index18 alt2\">&nbsp;</div>\n<div class=\"line number20 index19 alt1\"><code class=\"js keyword\">this</code><code class=\"js plain\">.getCallShot = </code><code class=\"js keyword\">function</code><code class=\"js plain\">() {</code></div>\n<div class=\"line number21 index20 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">maxProb = -1; </code><code class=\"js keyword\">var</code> <code class=\"js plain\">bestCmd = </code><code class=\"js keyword\">null</code><code class=\"js plain\">;</code></div>\n<div class=\"line number22 index21 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">for</code><code class=\"js plain\">(</code><code class=\"js keyword\">var</code> <code class=\"js plain\">pocketID = 0; pocketID &lt; 6; pocketID ++ ) {</code></div>\n<div class=\"line number23 index22 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">cmd = getCallShotForPocket(pocketID);</code></div>\n<div class=\"line number24 index23 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>\n<div class=\"line number25 index24 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">var</code> <code class=\"js plain\">prob = calculateProbability(cmd);</code></div>\n<div class=\"line number26 index25 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">console.log(</code><code class=\"js string\">\"prob for pocket \"</code> <code class=\"js plain\">+ pocketID + </code><code class=\"js string\">\" is \"</code> <code class=\"js plain\">+ prob);</code></div>\n<div class=\"line number27 index26 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">if</code> <code class=\"js plain\">( prob &gt; maxProb ) {</code></div>\n<div class=\"line number28 index27 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">maxProb = prob;</code></div>\n<div class=\"line number29 index28 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">bestCmd = cmd;</code></div>\n<div class=\"line number30 index29 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">}</code></div>\n<div class=\"line number31 index30 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js plain\">}</code></div>\n<div class=\"line number32 index31 alt1\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>\n<div class=\"line number33 index32 alt2\"><code class=\"js spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"js keyword\">return</code> <code class=\"js plain\">bestCmd;</code></div>\n<div class=\"line number34 index33 alt1\">&nbsp;</div>\n<div class=\"line number35 index34 alt2\"><code class=\"js plain\">};</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p>&nbsp;</p>\nThis new AI code has 2 functions:\n<ul>\n<li>To avoid duplication, a helper function getCallShotForPocket is added that calculates the shot command for a given pocket ID.</li>\n<li>In the new getCallShot function, for each of the 6 pockets, we create the shot command for that pocket and pass it to the <strong>calculateProbability</strong> function to get the probability estimate. If it is the best we have seen so far, we keep a record of it. After that, we simply pass this best shot command to the caller.</li>\n</ul>\n<p>If you click the Run button now, and you should see that your AI is automatically choosing pocket 1 as the target, and it should have printed out the success probability of all pockets. In your setup code, try to set the cue ball and black ball to different positions, and see if your AI can always choose the best pocket to aim for.</p>\n</li>\n</ul>"
    ]
  },
  {
    _id: '583b53e2e9026608852dd041',
    userId: 'system',
    package: 'starter',
    ScenarioName: 'Placing Cue Ball from Hand',
    ScenarioSequenceNumber: 6,
    SetupScript: 'ResetTable(true);\r\nPlaceBallOnTable(2, 0.2, -0.1); \r\nPlaceBallOnTable(3, 0.3, -0.3); \r\nPlaceBallOnTable(6, -0.2, 0.4); \r\nChooseRedColor(); \r\nPlaceCueBallFromHand();',
    Difficulty: 3,
    gameId: poolGameId,
    instructionContent: [
      "<h2>Placing Cue Ball from Hand</h2>\n<p>If the cue ball scratches (falls into a pocket), the opponent will have the cue ball in hand, meaning he can place it anywhere on the table before taking a call shot. There are a lot of strategies that can be used to optimize where to place the cue ball, but to keep it simple, let us start with ranking all target balls based on how far they are from the nearest pocket, and we place the cue ball right behind that target ball.</p>\n<ul>\n<ul>\n<li>\n<h3>The Scenario Setup</h3>\n<p>The setup for this tutorial is fairly simple: we place a few red balls on the table, and call the system command <strong>PlaceCueBallFromHand</strong>, which will in turn ask your AI to calculate where to place the cueball.</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_110603\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-javascript\"><code>ResetTable(true);\nPlaceBallOnTable(2, 0.2, -0.1); \nPlaceBallOnTable(3, 0.3, -0.3); \nPlaceBallOnTable(6, -0.2, 0.4); \nChooseRedColor(); \nPlaceCueBallFromHand();</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n</li>\n<li>\n<h3>Selecting Best Target Ball to Place Cue Ball Behind It</h3>\n<p>You don't need to use any new system function to accomplish this. Before looking at our solution, please try to work out the changes yourself.</p>\n</li>\n</ul>\n</ul>\n<p><br /><br /><br /></p>\n<ul>\n<li>\n<h3>Example AI Code for Cue Ball Placement</h3>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_500903\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-javascript\"><code>var getBallClosestToPocket = function() {\n  var minDistance = world.TableWidth * 10;\n  var bestBallID = -1; var bestPocketID = -1;\n \n  for(var i=0; i &lt; world.CandidateBallList[myID].length; i ++) {\n      var ballID = world.CandidateBallList[myID][i];\n       \n      for(var pocketID = 0; pocketID &lt; 6; pocketID ++ ) {\n        var dist = world.Pockets[pocketID].distance(world.Balls[ballID]);\n        if ( dist &lt; minDistance ) {\n          minDistance = dist; bestBallID = ballID; bestPocketID = pocketID;\n        }\n      }\n  };\n  return {bestBallID, bestPocketID};\n};\n \nthis.getCueBallPlacement = function() {\n \n  var bestBP = getBallClosestToPocket();\n  var ballID = bestBP.bestBallID; var pocketID = bestBP.bestPocketID;\n \n  // now place cue ball behind best ball, but make sure it doesn't collide with any other balls\n    var targetBallPos = world.Balls[ballID];\n    var pocketPos = world.Pockets[pocketID];\n    var direction = targetBallPos.clone().subtract(pocketPos).normalize();\n    var cueballPos = targetBallPos.clone().add(direction.multiplyScalar(world.BallDiameter*1.01));\n \n    return cueballPos;\n \n};</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>This example AI code has 2 functions</p>\n<ul>\n<li><strong>getBallClosestToPocket</strong> is a new helper function that iterates through all balls and all pockets to find the best combination with the shortest distance between them.</li>\n<li><strong>this.getCueBallPlacement</strong> is a new AI function to be called by the game system. It returns the cue ball placement position. In this implementation, it simply put the cue ball at the aim ball position right behind the target ball, at a distance 1% larger than the ball diameter.</li>\n</ul>\nTry to click the Run button now to see if it works. Also, in your setup code, try to set the cue ball and red balls to different positions, and see if your AI can always choose the best location for the cueball.</li>\n</ul>",
      '<h2>Releasing Your AI Code</h2>\n<p>Now that your AI has some basic implementation of all the 3 required functions (getBreakShot, getCallShot and getCueBallPlacement), it is ready to play a full game. To use the current version as the official code for your AI, you simply need to click the <strong>Release Robot Code</strong> button on top right, and the system will save a seperate copy of it and mark that copy as the code to run when your AI is in a game. After that, even if you make any change to your AI code in the editor, the official version will not be changed, until the next time you press the <strong>Release Robot Code</strong> button to release a new version. Try that now, and you should see that all the AI related game buttons are enabled in the main page.</p>'
    ]
  },
  {
    _id: '583b53e2e9026608852dd043',
    userId: 'system',
    package: 'advanced',
    ScenarioName: 'Rebounding Shots',
    ScenarioSequenceNumber: 8,
    SetupScript: 'ResetTable(true);\r\nPlaceBallOnTable(2, 0.2, -0.1); \r\nPlaceBallOnTable(3, 0.3, -0.3); \r\nPlaceBallOnTable(6, -0.2, 0.4); \r\nChooseRedColor(); \r\nPlaceCueBallFromHand();',
    Difficulty: 3,
    gameId: poolGameId,
    instructionContent: [
      "<h2>Rebounding Shots</h2>\n<p>Sometimes the best shot tries to hit the target ball to rebound off the rail first before rolling towards the target pocket. To achieve rebounding shots, we need to employ a little bit of geometry to \"mirror\" the target pocket to the other side of the rail.</p>\n<ul>\n<ul>\n<li>\n<h3>The Scenario Setup</h3>\n<p>In this setup, there are 2 red balls to choose from, but neither is good for a direct shot. But the red ball in the middle is a good candidate for a rebound shot againt the top rail towards the bottom middle pocket.</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_343958\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-markup\"><code>ResetTable(true);\nPlaceBallOnTable(0, 0.2, 0.2); \nPlaceBallOnTable(1, 0.4, -0.3); \nPlaceBallOnTable(2, 0.15, 0.4); \nPlaceBallOnTable(3, -0.44, -0.05); \nChooseRedColor(); \nTakeCallShot();</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n</li>\n<li>\n<h3>Calculation for a Rebounding Shot</h3>\nOne way to calculate the correct aiming angle for a rebounding shot is to reduce it to the simpler problem of aiming a direct shot (for which we already know how to solve). As illustrated below, when a ball hits the rail, it approximately bounces off the rail with the same angle as it bounces into the rail, i.e. angle1 = angle2. Therefore, if we imagine the rail is a mirror, the reflection of the ball's trajectory after hitting the rail would be on the same line as the ball's direction into the rail. Given this insight, we can simply mirror the target pocket from position p2 to position p2mirror, and try to aim the target ball towards p2mirror, then the ball would be heading towards p2 when it bounces off the rail.\n<p>Before looking at our example solution below, try to work out the changes yourself.</p>\n</li>\n</ul>\n</ul>\n<p><br /><br /><br /></p>\n<ul>\n<li>\n<h3>Example AI Code for Including Rebounding Shots</h3>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_689211\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-javascript\"><code>// find the rail that intersects with the line from pos1 to pos2\nvar findIntersectingRail = function(pos1, pos2) {\n    for(var i=0; i &lt; world.Cushions.length; i++) {\n        var r = world.Cushions[i];\n        var result = world.getIntersection(r.p1, r.p2, pos1, pos2);\n        if ( result.onLine1 ) {\n            return r;\n        }\n    }\n    return null;\n};\n \nvar getCallShotForPocketForBall = function(pocketID, ballID, rail) {\n \n    var targetBallPos = world.Balls[ballID];\n    var pocketPos = world.Pockets[pocketID];\n    if ( typeof(rail) !== \"undefined\" ) {\n        if ( rail.p1.x == rail.p2.x ) {\n            // vertial rail\n            pocketPos.x = rail.p1.x * 2 - pocketPos.x;         \n        } else {\n            pocketPos.y = rail.p1.y * 2 - pocketPos.y;\n        }\n    }\n \n    var direction = targetBallPos.clone().subtract(pocketPos).normalize();\n    var aimPos = targetBallPos.clone().add(direction.multiplyScalar(world.BallDiameter));\n \n    var cmd = {\n        aimx: aimPos.x,\n        aimy: aimPos.y,\n        strength: 700,\n        spin: -0.5,\n        targetPocketID: pocketID,\n        targetBallID: ballID\n    };\n     \n    return cmd;\n};\n \n \nthis.getCallShot = function() {\n    var maxProb = -1; var bestCmd = null;\n    for(var i=0; i &lt; world.CandidateBallList[myID].length; i ++) {\n        var ballID = world.CandidateBallList[myID][i];\n        for(var pocketID = 0; pocketID &lt; 6; pocketID ++ ) {\n            for(var doRebound=0; doRebound &lt;= 1; doRebound++) {\n                var cmd;\n                if ( doRebound == 0 ) {\n                    // direct shot \n                    cmd = getCallShotForPocketForBall(pocketID, ballID);\n \n                } else {\n                    // try reflection\n                    var tagetPos = world.Balls[ballID];\n                    var cueballPos = world.Balls[0];\n                    var rail = this.findIntersectingRail(cueballPos, tagetPos);\n                    if ( rail == null ) continue;\n                    cmd = getCallShotForPocketForBall(mirrorPos, ballID, rail);\n                }\n \n                if ( !world.isValidFirstTouchColor(cmd, world.PlayerInfo[myID].chosenColor)) {\n                    // first touch color is not valid\n                    continue;\n                }\n                var targetballPocketProb = calculateProbability(cmd);\n                var cueballPocketProb = CalculateProbabilityByBallID(cmd, 0);\n                var blackballPocketProb = CalculateProbabilityByBallID(cmd, 1);\n                console.log(\"prob for pocket \" + pocketID + \" and ballID \" + ballID + \" is \" + targetballPocketProb + \" cue ball \" + cueballPocketProb + \" blackball \" + blackballPocketProb);\n                if ( targetballPocketProb &gt; maxProb &amp;&amp; cueballPocketProb &lt; 20 &amp;&amp; blackballPocketProb &lt; 0.1 ) {\n                    maxProb = targetballPocketProb;\n                    bestCmd = cmd;\n                }\n            }\n        }\n    };\n    return bestCmd;\n};</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>This example AI code is modified from tutorial 7 to with the following changes:</p>\n<ul>\n<li>A new helper function <strong>findIntersectingRail</strong> has been added to find the rail that intersects with the straight line from the cue ball to the target ball. Here we make a simplifying assumption that we'll try to rebound the target ball against this one rail. Feel free to improve it to consider other rails.</li>\n<li>The helper function <strong>getCallShotForPocketForBall</strong> has been improved to take a third parameter \"rail\", and if the rail is defined, the function will first mirror the target pocket position against this rail before calculating the shot command.</li>\n<li>The main function <strong>getCallShot</strong> is modified to add a new inner loop to calculate the shot command for either no rebounding or with Rebounding.</li>\n</ul>\n<p>&nbsp;</p>\n<p>Try to click the Run button now to see if it works. Also, in the setup code, try to set the balls to different positions, and see if your AI can always avoid touching the wrong balls first.</p>\n</li>\n</ul>"
    ]
  },
  {
    _id: '583b53e2e9026608852dd044',
    userId: 'system',
    package: 'advanced',
    ScenarioName: 'Increasing Pocketing Probability',
    ScenarioSequenceNumber: 9,
    SetupScript: 'ResetTable(true);\r\nPlaceBallOnTable(2, 0.2, -0.1); \r\nPlaceBallOnTable(3, 0.3, -0.3); \r\nPlaceBallOnTable(6, -0.2, 0.4); \r\nChooseRedColor(); \r\nPlaceCueBallFromHand();',
    Difficulty: 5,
    gameId: poolGameId,
    instructionContent: [
      "<h2>Placing Cue Ball from Hand</h2>\n<p>If the cue ball scratches (falls into a pocket), the opponent will have the cue ball in hand, meaning he can place it anywhere on the table before taking a call shot. There are a lot of strategies that can be used to optimize where to place the cue ball, but to keep it simple, let us start with ranking all target balls based on how far they are from the nearest pocket, and we place the cue ball right behind that target ball.</p>\n<ul>\n<ul>\n<li>\n<h3>The Scenario Setup</h3>\n<p>The setup for this tutorial is fairly simple: we place a few red balls on the table, and call the system command <strong>PlaceCueBallFromHand</strong>, which will in turn ask your AI to calculate where to place the cueball.</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_41356\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-javascript\"><code>ResetTable(true);\nPlaceBallOnTable(2, 0.2, -0.1); \nPlaceBallOnTable(3, 0.3, -0.3); \nPlaceBallOnTable(6, -0.2, 0.4); \nChooseRedColor(); \nPlaceCueBallFromHand();</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n</li>\n<li>\n<h3>Selecting Best Target Ball to Place Cue Ball Behind It</h3>\n<p>You don't need to use any new system function to accomplish this. Before looking at our solution, please try to work out the changes yourself.</p>\n</li>\n</ul>\n</ul>\n<p><br /><br /><br /></p>\n<ul>\n<li>\n<h3>Example AI Code for Cue Ball Placement</h3>\n<p>&nbsp;</p>\n<div>\n<div id=\"highlighter_978569\" class=\"syntaxhighlighter  js\">\n<div class=\"toolbar\">\n<pre class=\"language-javascript\"><code>var getBallClosestToPocket = function() {\n  var minDistance = world.TableWidth * 10;\n  var bestBallID = -1; var bestPocketID = -1;\n \n  for(var i=0; i &lt; world.CandidateBallList[myID].length; i ++) {\n      var ballID = world.CandidateBallList[myID][i];\n       \n      for(var pocketID = 0; pocketID &lt; 6; pocketID ++ ) {\n        var dist = world.Pockets[pocketID].distance(world.Balls[ballID]);\n        if ( dist &lt; minDistance ) {\n          minDistance = dist; bestBallID = ballID; bestPocketID = pocketID;\n        }\n      }\n  };\n  return {bestBallID, bestPocketID};\n};\n \nthis.getCueBallPlacement = function() {\n \n  var bestBP = getBallClosestToPocket();\n  var ballID = bestBP.bestBallID; var pocketID = bestBP.bestPocketID;\n \n  // now place cue ball behind best ball, but make sure it doesn't collide with any other balls\n    var targetBallPos = world.Balls[ballID];\n    var pocketPos = world.Pockets[pocketID];\n    var direction = targetBallPos.clone().subtract(pocketPos).normalize();\n    var cueballPos = targetBallPos.clone().add(direction.multiplyScalar(world.BallDiameter*1.01));\n \n    return cueballPos;\n \n};</code></pre>\n</div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>This example AI code has 2 functions</p>\n<ul>\n<li><strong>getBallClosestToPocket</strong> is a new helper function that iterates through all balls and all pockets to find the best combination with the shortest distance between them.</li>\n<li><strong>this.getCueBallPlacement</strong> is a new AI function to be called by the game system. It returns the cue ball placement position. In this implementation, it simply put the cue ball at the aim ball position right behind the target ball, at a distance 1% larger than the ball diameter.</li>\n</ul>\nTry to click the Run button now to see if it works. Also, in your setup code, try to set the cue ball and red balls to different positions, and see if your AI can always choose the best location for the cueball.</li>\n</ul>",
      '<h2>Releasing Your AI Code</h2>\n<p>Now that your AI has some basic implementation of all the 3 required functions (getBreakShot, getCallShot and getCueBallPlacement), it is ready to play a full game. To use the current version as the official code for your AI, you simply need to click the <strong>Release Robot Code</strong> button on top right, and the system will save a seperate copy of it and mark that copy as the code to run when your AI is in a game. After that, even if you make any change to your AI code in the editor, the official version will not be changed, until the next time you press the <strong>Release Robot Code</strong> button to release a new version. Try that now, and you should see that all the AI related game buttons are enabled in the main page.</p>'
    ]
  }
];

const gameGeneralData = [
  {
    _id: poolGameId,
    title: 'Trajectory Pool',
    trackName: 'PathPool',
    name: 'lucky_pool',
    imageUrl: '/images/poolscreenicon2.png',
    description: 'Pool game with ball trajectory preview and random shot skews',
    teamSize: 1,
    teamNumber: 2,
    level: [
        { name: LEVELS.BEGINNER, imageUrl: '/images/basic-gray.svg' },
        { name: LEVELS.ADVANCED, imageUrl: '/images/advanced.svg' },
        // { name: LEVELS.PROFESSIONAL, imageUrl: '/images/advanced-grey.svg' },
    ],
    opponent: [
        { title: OPPONENTS.MYSELF.title, name: OPPONENTS.MYSELF.name, imageUrl: '/images/casual-gray.svg', link: '/gamesRoomEntry' },
        { title: OPPONENTS.PLAYERNETWORK.title, name: OPPONENTS.PLAYERNETWORK.name, imageUrl: '/images/friends3.svg', link: '/gamesRoomNetwork' },
        { title: OPPONENTS.TOURNAMENT.title, name: OPPONENTS.TOURNAMENT.name, imageUrl: '/images/trophy-gray.svg', link: '/tournament' },
    ]
  },
  // {
  //   _id: 'z7Zw82CrjYW2ZJWZZ',
  //   title: 'Dodge Ball',
  //   trackName: 'DodgeBall',
  //   name: 'dodgeball',
  //   imageUrl: '/images/cardodgeballicon.jpg',
  //   description: 'First-person ball shooting game with cars in a 3D world',
  //   teamSize: 1,
  //   teamNumber: 2,
  //   level: [
  //       { name: LEVELS.BEGINNER, imageUrl: '/images/basic-gray.svg' },
  //       { name: LEVELS.ADVANCED, imageUrl: '/images/advanced.svg' },
  //       // { name: LEVELS.PROFESSIONAL, imageUrl: '/images/advanced-grey.svg' },
  //   ],
  //   opponent: [
  //       { title: OPPONENTS.MYSELF.title, name: OPPONENTS.MYSELF.name, imageUrl: '/images/casual-gray.svg', link: '/gamesRoomEntry' },
  //       { title: OPPONENTS.PLAYERNETWORK.title, name: OPPONENTS.PLAYERNETWORK.name, imageUrl: '/images/friends3.svg', link: '/gamesRoomNetwork' },
  //       { title: OPPONENTS.TOURNAMENT.title, name: OPPONENTS.TOURNAMENT.name, imageUrl: '/images/trophy-gray.svg', link: '/tournament' },
  //   ]
  // }

  // {
  //   _id: 'x6Zw82CrjYW2ZJWYY',
  //   title: 'Magic Forest',
  //   trackName: 'MagicForest',
  //   name: 'magic_forest',
  //   imageUrl: '/images/magicforestscreenshot1.png',
  //   description: 'Grab magic mushroom in a maze guarded by monsters',
  //   teamSize: 1,
  //   teamNumber: 2,
  //   level: [
  //       { name: LEVELS.ADVANCED, imageUrl: '/images/advanced.svg' },
  //       { name: LEVELS.PROFESSIONAL, imageUrl: '/images/advanced-grey.svg' },
  //   ],
  //   opponent: [
  //       { title: OPPONENTS.MYSELF.title, name: OPPONENTS.MYSELF.name, imageUrl: '/images/casual-gray.svg', link: '/gamesRoomEntry' },
  //       { title: OPPONENTS.PLAYERNETWORK.title, name: OPPONENTS.PLAYERNETWORK.name, imageUrl: '/images/friends3.svg', link: '/gamesRoomNetwork' },
  //       { title: OPPONENTS.TOURNAMENT.title, name: OPPONENTS.TOURNAMENT.name, imageUrl: '/images/trophy-gray.svg', link: '/tournament' },
  //   ]
  // }
];

const prepareGameGeneralData = () => {
  //if (Games.find().count() === 0) {
    Games.remove({_id: poolGameId});
    _.map(gameGeneralData, (doc) => {
      Games.insert(doc);
    });
  //}
};


const prepareGameData = () => {
  prepareGameGeneralData();
};

export default prepareGameData;
